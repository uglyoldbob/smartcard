use clap::Parser;
use tlv_parser::tlv::Tlv;

#[derive(Parser, Clone, Debug, clap::ValueEnum)]
enum Mode {
    Certificate,
    Initialize,
    SetPrintedInfo,
}

#[derive(Parser, Debug)]
struct Args {
    #[arg(short, long)]
    mode: Option<Mode>,
}

fn main() {
    let args = Args::parse();

    if let Some(mode) = &args.mode {
        match mode {
            Mode::Certificate => {
                card::with_current_valid_piv_card(|reader| {
                    let mut writer = reader.to_writer();
                    let cert = vec![
                        0x30, 0x82, 0x04, 0x2D, 0x30, 0x82, 0x02, 0x15, 0xA0, 0x03, 0x02, 0x01,
                        0x02, 0x02, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
                        0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B,
                        0x05, 0x00, 0x30, 0x14, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04,
                        0x03, 0x0C, 0x09, 0x75, 0x6F, 0x62, 0x20, 0x72, 0x73, 0x61, 0x20, 0x31,
                        0x30, 0x1E, 0x17, 0x0D, 0x32, 0x34, 0x30, 0x37, 0x30, 0x31, 0x31, 0x35,
                        0x32, 0x34, 0x33, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x35, 0x30, 0x37, 0x30,
                        0x31, 0x31, 0x35, 0x32, 0x34, 0x33, 0x39, 0x5A, 0x30, 0x22, 0x31, 0x20,
                        0x30, 0x1E, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x17, 0x75, 0x6F, 0x62,
                        0x20, 0x72, 0x73, 0x61, 0x20, 0x31, 0x20, 0x41, 0x64, 0x6D, 0x69, 0x6E,
                        0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x30, 0x82, 0x01, 0x22,
                        0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01,
                        0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A,
                        0x02, 0x82, 0x01, 0x01, 0x00, 0x9B, 0x12, 0x25, 0x27, 0xDF, 0xDA, 0xD1,
                        0x9D, 0xA4, 0x36, 0xFD, 0x2B, 0x9F, 0x07, 0x73, 0xBB, 0x21, 0x4D, 0xE6,
                        0x8F, 0x3F, 0xC2, 0x65, 0xDF, 0x58, 0x3C, 0x96, 0xC9, 0x8E, 0x2D, 0x5A,
                        0x07, 0x3F, 0xC5, 0x82, 0xCC, 0xE0, 0x1E, 0xED, 0xBD, 0x03, 0xA4, 0xF8,
                        0x64, 0x3B, 0xFE, 0x26, 0x55, 0x2E, 0x6D, 0xBD, 0x23, 0xBD, 0x9C, 0xCD,
                        0xC2, 0xC8, 0x47, 0xA5, 0xF6, 0xCC, 0x99, 0x95, 0x3F, 0xF0, 0xE4, 0xBB,
                        0x91, 0xFA, 0x54, 0x5C, 0xF6, 0x2F, 0x74, 0x5B, 0x65, 0x5B, 0x13, 0x16,
                        0x44, 0xA0, 0x07, 0x73, 0xA0, 0xE3, 0x60, 0x4E, 0x07, 0xDA, 0xEA, 0x79,
                        0xC9, 0x46, 0xFA, 0xD8, 0x44, 0xEC, 0x60, 0x23, 0xCE, 0xD1, 0x07, 0xFE,
                        0xF1, 0x2A, 0x2F, 0xEA, 0x9D, 0x28, 0x27, 0xAE, 0x42, 0x04, 0x00, 0x14,
                        0x89, 0x9E, 0x8F, 0x23, 0xA7, 0x7E, 0xBA, 0x34, 0xE9, 0x88, 0x03, 0x8A,
                        0x82, 0x8C, 0x56, 0x9A, 0xD7, 0x7F, 0x3E, 0x75, 0x27, 0x9E, 0x52, 0x3A,
                        0x67, 0x90, 0x00, 0x92, 0xEB, 0xF6, 0xB2, 0x92, 0xDA, 0xEF, 0xE9, 0x73,
                        0x03, 0xA5, 0xD2, 0x2E, 0x20, 0xC1, 0xA3, 0x95, 0x42, 0xE3, 0xBD, 0x84,
                        0x08, 0x91, 0x4E, 0xC7, 0x34, 0x04, 0xC8, 0xFD, 0xB4, 0x02, 0xDF, 0x93,
                        0x2F, 0xFC, 0x9E, 0x92, 0x3D, 0x36, 0xC1, 0x69, 0x77, 0x4A, 0xDB, 0x08,
                        0xF3, 0x9D, 0x18, 0x16, 0x13, 0x77, 0x81, 0x78, 0x84, 0x56, 0xB6, 0xC0,
                        0x76, 0x9C, 0x60, 0x39, 0xC3, 0xC8, 0x57, 0x9C, 0x71, 0x22, 0x2C, 0xF0,
                        0x74, 0xFE, 0x66, 0x9B, 0xA1, 0x30, 0xB5, 0xF7, 0x60, 0x30, 0x0B, 0x86,
                        0x6F, 0x67, 0x5F, 0xC5, 0x4A, 0x33, 0xAC, 0x92, 0x93, 0xA7, 0xBE, 0xAC,
                        0x49, 0x55, 0x73, 0xD7, 0xD2, 0x73, 0x2A, 0x9F, 0x34, 0x2F, 0x36, 0xE1,
                        0x6A, 0xF6, 0xD1, 0x57, 0x80, 0xFD, 0xA7, 0xEF, 0xCB, 0x02, 0x03, 0x01,
                        0x00, 0x01, 0xA3, 0x69, 0x30, 0x67, 0x30, 0x13, 0x06, 0x03, 0x55, 0x1D,
                        0x25, 0x04, 0x0C, 0x30, 0x0A, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05,
                        0x07, 0x03, 0x02, 0x30, 0x50, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05,
                        0x07, 0x01, 0x01, 0x04, 0x44, 0x30, 0x42, 0x30, 0x40, 0x06, 0x08, 0x2B,
                        0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x34, 0x68, 0x74, 0x74,
                        0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x73, 0x65, 0x6C, 0x66, 0x2E, 0x75, 0x67,
                        0x6C, 0x79, 0x6F, 0x6C, 0x64, 0x62, 0x6F, 0x62, 0x2E, 0x63, 0x6F, 0x6D,
                        0x3A, 0x33, 0x30, 0x30, 0x31, 0x2F, 0x70, 0x6B, 0x69, 0x2F, 0x64, 0x65,
                        0x66, 0x61, 0x75, 0x6C, 0x74, 0x2F, 0x63, 0x61, 0x2F, 0x6F, 0x63, 0x73,
                        0x70, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
                        0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x9F, 0xF5, 0xFE,
                        0x7A, 0xA1, 0x80, 0xAD, 0xF2, 0x93, 0x1A, 0x2D, 0xA6, 0x5C, 0xAD, 0x48,
                        0x52, 0xD5, 0xC0, 0x7E, 0xDE, 0x7D, 0x78, 0xD2, 0x55, 0x6E, 0xE8, 0x01,
                        0x96, 0x2D, 0x70, 0x8A, 0x1D, 0xA0, 0xD9, 0x84, 0xE2, 0x3D, 0xB7, 0x4F,
                        0xBC, 0xC0, 0xAF, 0xD7, 0x39, 0xFA, 0xA1, 0xD9, 0x62, 0xD0, 0x27, 0xB3,
                        0x29, 0xED, 0x9F, 0x7A, 0x4F, 0xC4, 0x5F, 0x53, 0x6A, 0xE6, 0x38, 0xE8,
                        0xFD, 0xD9, 0x7B, 0xA4, 0x1F, 0xFC, 0x3D, 0xC2, 0x54, 0x22, 0x47, 0xDF,
                        0x32, 0xE6, 0x71, 0x86, 0xDE, 0x4B, 0x6B, 0xB6, 0x4D, 0x3B, 0x3C, 0xB2,
                        0x24, 0x35, 0xA5, 0xDD, 0x9A, 0xEA, 0xEE, 0x69, 0xBE, 0xEA, 0xAD, 0x6E,
                        0xAC, 0x85, 0x69, 0x1F, 0xFE, 0x0F, 0x97, 0x33, 0xF1, 0x11, 0x85, 0x28,
                        0x4A, 0x60, 0x0B, 0x14, 0x49, 0x80, 0x7C, 0x08, 0xC5, 0x7C, 0x71, 0x6E,
                        0xAD, 0x76, 0x3D, 0x0B, 0x90, 0x9D, 0x65, 0xA4, 0x20, 0x76, 0x58, 0x3D,
                        0xB0, 0x1B, 0x70, 0x08, 0xD9, 0x0B, 0x1E, 0xA5, 0xDA, 0x59, 0x09, 0x41,
                        0x01, 0x67, 0x8C, 0x02, 0x7E, 0xBB, 0x69, 0x97, 0x57, 0x5F, 0xF8, 0x73,
                        0xA8, 0x9B, 0xA4, 0x4C, 0xD5, 0xD1, 0xEA, 0x51, 0xED, 0xA3, 0xDE, 0x09,
                        0xE6, 0xFD, 0xC8, 0x5A, 0x2C, 0x9D, 0x9D, 0x54, 0x26, 0x7F, 0x5B, 0x9C,
                        0x3C, 0x52, 0x14, 0xCB, 0xC6, 0x2C, 0x59, 0xDA, 0xAB, 0x74, 0x79, 0x71,
                        0xF9, 0x74, 0x38, 0xBD, 0x4C, 0xFF, 0x5A, 0x8C, 0x20, 0xFA, 0x06, 0x4E,
                        0xF5, 0x82, 0xAD, 0x97, 0xB7, 0x42, 0xF3, 0x10, 0x40, 0xC7, 0xB1, 0x8D,
                        0x84, 0x87, 0xD5, 0x32, 0xC5, 0xAA, 0xBC, 0xCD, 0xAA, 0x43, 0x68, 0x08,
                        0x2D, 0x0C, 0xC9, 0x06, 0xDC, 0x5C, 0x41, 0xE6, 0xB3, 0xB6, 0x51, 0x46,
                        0x5A, 0x58, 0x16, 0x28, 0x18, 0x0F, 0x11, 0xB6, 0x48, 0x98, 0x06, 0xC4,
                        0xB5, 0xF5, 0x08, 0x57, 0xDB, 0x15, 0x58, 0x5E, 0xB6, 0x20, 0xBA, 0x88,
                        0x69, 0x06, 0x6B, 0x8B, 0x93, 0xAA, 0x34, 0x18, 0x53, 0x11, 0x16, 0x71,
                        0x8F, 0x34, 0x3F, 0xC6, 0x32, 0xA2, 0xF9, 0x8E, 0xC1, 0x23, 0xBA, 0xDC,
                        0x8F, 0x79, 0x24, 0x7C, 0xEB, 0x58, 0x74, 0x04, 0xB0, 0xE8, 0xC7, 0x76,
                        0x2C, 0x16, 0x6A, 0xC4, 0xBD, 0xF5, 0xFD, 0xAC, 0x22, 0x50, 0xB6, 0xE2,
                        0xCA, 0x39, 0x58, 0x1A, 0x2C, 0xD3, 0x7C, 0x17, 0x73, 0x1C, 0xA2, 0x8F,
                        0xE1, 0xDA, 0x6C, 0x44, 0xF4, 0x01, 0xC7, 0xED, 0xFF, 0x7D, 0x43, 0x60,
                        0xDD, 0xA9, 0x37, 0x58, 0x8A, 0x73, 0xEA, 0xB3, 0x2B, 0xA3, 0x1E, 0xCE,
                        0xC2, 0x46, 0xB2, 0xC7, 0xC1, 0x62, 0xEB, 0x0B, 0x83, 0x5C, 0x3B, 0xE4,
                        0xC9, 0xB8, 0x6F, 0x26, 0x5A, 0x36, 0x64, 0xD5, 0x75, 0x33, 0x60, 0x04,
                        0x7B, 0x97, 0x7D, 0x98, 0xA0, 0xB5, 0x54, 0xF8, 0xE3, 0x35, 0x7E, 0x71,
                        0x3E, 0x01, 0x48, 0xA4, 0xCA, 0x97, 0xEE, 0xD2, 0x75, 0xFA, 0x42, 0x9D,
                        0x78, 0x17, 0x5D, 0xF4, 0x38, 0x39, 0x5D, 0x8E, 0x37, 0xE2, 0xCA, 0x9F,
                        0x39, 0x94, 0x0F, 0x21, 0x5D, 0x64, 0x8F, 0xEA, 0x19, 0x8B, 0x2A, 0xAE,
                        0xC8, 0x89, 0x74, 0xC6, 0xE6, 0xA0, 0x4E, 0x0F, 0x89, 0xD3, 0xFF, 0xA3,
                        0xE8, 0xB8, 0xE7, 0xF7, 0x47, 0x8A, 0xE7, 0x9C, 0x60, 0x86, 0xAA, 0x85,
                        0x99, 0xED, 0xAA, 0x44, 0x38, 0x28, 0xE9, 0x8D, 0xF5, 0xC4, 0x17, 0xB8,
                        0x55, 0x40, 0xCC, 0xAE, 0x37, 0x4B, 0xDC, 0xFD, 0xF2, 0x8D, 0x63, 0x32,
                        0xB1, 0xED, 0xA1, 0xF0, 0x89, 0x26, 0x29, 0xF2, 0x52, 0xD7, 0x62, 0x9E,
                        0x1C, 0x5D, 0xD6, 0x4D, 0x16, 0x94, 0x6F, 0x10, 0x7A, 0x99, 0x1D, 0xE7,
                        0x6F, 0xBF, 0x88, 0x50, 0xF4, 0x6B, 0x5A, 0xCD, 0xA1, 0xB2, 0x50, 0x86,
                        0xBB, 0x5B, 0x42, 0xAA, 0x13,
                    ];
                    writer.store_x509_cert(card::MANAGEMENT_KEY_DEFAULT, &cert, 1);
                });
            }
            Mode::Initialize => {
                card::with_next_valid_piv_card(|reader| {
                    let mut writer = card::PivCardWriter::extend(reader);
                    let data = writer.reader.get_piv_data(vec![0x5f, 0xc1, 5]);
                    println!("Data read is {:02X?}", data);
                    let init_keys = |writer: &mut card::PivCardWriter| {
                        let _keypair = writer
                            .generate_keypair_with_management(
                                card::MANAGEMENT_KEY_DEFAULT,
                                card::AuthenticateAlgorithm::Rsa2048,
                                card::Slot::Authentication,
                                card::KeypairPinPolicy::Always,
                            )
                            .unwrap();
                        let keypair2 = writer.generate_keypair_with_management(
                            card::MANAGEMENT_KEY_DEFAULT,
                            card::AuthenticateAlgorithm::Rsa2048,
                            card::Slot::Signing,
                            card::KeypairPinPolicy::Always,
                        );
                        println!("Keypair2 is {:?}", keypair2);
                        if keypair2.is_err() {
                            return;
                        }
                    };
                    match data {
                        Err(e) => {
                            println!("Error is {:?}, initializing keys", e);
                            init_keys(&mut writer);
                        }
                        Ok(d) => {
                            println!("The data read is {:02X?}", d);
                            let sig = writer.reader.sign_data(
                                card::Slot::Authentication,
                                &[b'1', b'2', b'3', b'4', b'5', b'6'],
                                vec![0xff; 256],
                            );
                            let sig2 = writer.reader.sign_data(
                                card::Slot::Signing,
                                &[b'1', b'2', b'3', b'4', b'5', b'6'],
                                vec![0xff; 256],
                            );
                            println!("Signature is {:02X?}", sig);
                            println!("Signature2 is {:02X?}", sig2);
                        }
                    }
                });
            }
            Mode::SetPrintedInfo => {
                println!("need to write printed info with example data");
                card::with_current_valid_piv_card(|reader| {
                    let mut writer = reader.to_writer();
                    let e = writer.authenticate_management(card::MANAGEMENT_KEY_DEFAULT);
                    println!("management login {:?}", e);
                    let tlv = Tlv::new(
                        1,
                        tlv_parser::tlv::Value::Val("Example name".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv2 = Tlv::new(
                        2,
                        tlv_parser::tlv::Value::Val("Affiliation example".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv3 = Tlv::new(
                        4,
                        tlv_parser::tlv::Value::Val("202500525".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv4 = Tlv::new(
                        5,
                        tlv_parser::tlv::Value::Val("SERIAL1".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv5 = Tlv::new(
                        6,
                        tlv_parser::tlv::Value::Val("ISSUER_ID".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv6 = Tlv::new(
                        7,
                        tlv_parser::tlv::Value::Val("ORG AFFIL 1".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv7 = Tlv::new(
                        8,
                        tlv_parser::tlv::Value::Val("ORG AFFIL 2".as_bytes().to_vec()),
                    )
                    .unwrap();
                    let tlv8 = Tlv::new(0xfe, tlv_parser::tlv::Value::Nothing).unwrap();
                    let tlv_total = tlv_parser::tlv::Value::TlvList(vec![
                        tlv, tlv2, tlv3, tlv4, tlv5, tlv6, tlv7, tlv8,
                    ]);
                    let s = writer.write_piv_data(vec![0x5f, 0xc1, 0x09], tlv_total.to_vec());
                    println!("Write returned {:02X?}", s);
                });
            }
        }
    }
}
